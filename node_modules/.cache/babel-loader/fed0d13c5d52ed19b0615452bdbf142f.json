{"ast":null,"code":"import { createCatalogAndCategories } from '../api/requests';\nimport { catalogFirstPageRequestStarted, catalogFirstPageRequestSuccess, catalogRequestFailure } from './catalogAction';\nexport const categoriesRequestStarted = () => ({\n  type: 'CATEGORIES_REQUEST'\n});\nexport const categoriesRequestSuccess = categoriesData => ({\n  type: 'CATEGORIES_REQUEST_SUCCESS',\n  payload: {\n    categoriesData\n  }\n});\nexport const categoriesRequestFailure = errorText => ({\n  type: 'CATEGORIES_REQUEST_FAILURE',\n  payload: {\n    errorText\n  }\n});\nexport const activeCategory = id => ({\n  type: 'ACTIVE_CATEGORY',\n  payload: {\n    activeCategory: id\n  }\n});\nexport const catalogAndCategoriesRequest = (searchText, categoryId, offset) => async dispatch => {\n  dispatch(categoriesRequestStarted());\n  dispatch(catalogFirstPageRequestStarted());\n  createCatalogAndCategories(searchText, categoryId, offset).then(([categoriesData, catalogData]) => {\n    dispatch(categoriesRequestSuccess(categoriesData));\n    dispatch(catalogFirstPageRequestSuccess(catalogData));\n  }).catch(e => {\n    const detailedError = JSON.parse(e.message);\n    dispatch(categoriesRequestFailure(detailedError.text));\n    dispatch(catalogRequestFailure(detailedError.text));\n  });\n};","map":{"version":3,"sources":["D:/Documents/GitHub/ra16-diploma-master/src/actions/categoriesAction.js"],"names":["createCatalogAndCategories","catalogFirstPageRequestStarted","catalogFirstPageRequestSuccess","catalogRequestFailure","categoriesRequestStarted","type","categoriesRequestSuccess","categoriesData","payload","categoriesRequestFailure","errorText","activeCategory","id","catalogAndCategoriesRequest","searchText","categoryId","offset","dispatch","then","catalogData","catch","e","detailedError","JSON","parse","message","text"],"mappings":"AAAA,SAASA,0BAAT,QAA2C,iBAA3C;AACA,SACEC,8BADF,EAEEC,8BAFF,EAGEC,qBAHF,QAIO,iBAJP;AAMA,OAAO,MAAMC,wBAAwB,GAAG,OAAO;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAP,CAAjC;AACP,OAAO,MAAMC,wBAAwB,GAAIC,cAAD,KAAqB;AAAEF,EAAAA,IAAI,EAAE,4BAAR;AAAsCG,EAAAA,OAAO,EAAE;AAAED,IAAAA;AAAF;AAA/C,CAArB,CAAjC;AACP,OAAO,MAAME,wBAAwB,GAAIC,SAAD,KAAgB;AAAEL,EAAAA,IAAI,EAAE,4BAAR;AAAsCG,EAAAA,OAAO,EAAE;AAAEE,IAAAA;AAAF;AAA/C,CAAhB,CAAjC;AACP,OAAO,MAAMC,cAAc,GAAIC,EAAD,KAAS;AAAEP,EAAAA,IAAI,EAAE,iBAAR;AAA2BG,EAAAA,OAAO,EAAE;AAAEG,IAAAA,cAAc,EAAEC;AAAlB;AAApC,CAAT,CAAvB;AAEP,OAAO,MAAMC,2BAA2B,GAAG,CAACC,UAAD,EAAaC,UAAb,EAAyBC,MAAzB,KAAoC,MAAOC,QAAP,IAAoB;AACjGA,EAAAA,QAAQ,CAACb,wBAAwB,EAAzB,CAAR;AACAa,EAAAA,QAAQ,CAAChB,8BAA8B,EAA/B,CAAR;AACAD,EAAAA,0BAA0B,CAACc,UAAD,EAAaC,UAAb,EAAyBC,MAAzB,CAA1B,CACGE,IADH,CACQ,CAAC,CAACX,cAAD,EAAiBY,WAAjB,CAAD,KAAmC;AACvCF,IAAAA,QAAQ,CAACX,wBAAwB,CAACC,cAAD,CAAzB,CAAR;AACAU,IAAAA,QAAQ,CAACf,8BAA8B,CAACiB,WAAD,CAA/B,CAAR;AACD,GAJH,EAIKC,KAJL,CAIYC,CAAD,IAAO;AACd,UAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,OAAb,CAAtB;AACAR,IAAAA,QAAQ,CAACR,wBAAwB,CAACa,aAAa,CAACI,IAAf,CAAzB,CAAR;AACAT,IAAAA,QAAQ,CAACd,qBAAqB,CAACmB,aAAa,CAACI,IAAf,CAAtB,CAAR;AACD,GARH;AASD,CAZM","sourcesContent":["import { createCatalogAndCategories } from '../api/requests';\nimport {\n  catalogFirstPageRequestStarted,\n  catalogFirstPageRequestSuccess,\n  catalogRequestFailure,\n} from './catalogAction';\n\nexport const categoriesRequestStarted = () => ({ type: 'CATEGORIES_REQUEST' });\nexport const categoriesRequestSuccess = (categoriesData) => ({ type: 'CATEGORIES_REQUEST_SUCCESS', payload: { categoriesData } });\nexport const categoriesRequestFailure = (errorText) => ({ type: 'CATEGORIES_REQUEST_FAILURE', payload: { errorText } });\nexport const activeCategory = (id) => ({ type: 'ACTIVE_CATEGORY', payload: { activeCategory: id } });\n\nexport const catalogAndCategoriesRequest = (searchText, categoryId, offset) => async (dispatch) => {\n  dispatch(categoriesRequestStarted());\n  dispatch(catalogFirstPageRequestStarted());\n  createCatalogAndCategories(searchText, categoryId, offset)\n    .then(([categoriesData, catalogData]) => {\n      dispatch(categoriesRequestSuccess(categoriesData));\n      dispatch(catalogFirstPageRequestSuccess(catalogData));\n    }).catch((e) => {\n      const detailedError = JSON.parse(e.message);\n      dispatch(categoriesRequestFailure(detailedError.text));\n      dispatch(catalogRequestFailure(detailedError.text));\n    });\n};\n"]},"metadata":{},"sourceType":"module"}